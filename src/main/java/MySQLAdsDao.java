import com.mysql.cj.jdbc.Driver;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

// This class should have a private instance property named connection of type Connection that is initialized in the constructor. Define your constructor so that it accepts an instance of your Config class so that it can obtain the database credentials.

public class MySQLAdsDao implements Ads {
    private Connection connection;

    // The connection object will be created just once, in this class' constructor, and the individual methods that query the database should use the connection object to create statements.

    // Constructor (try/catch or throws?)
    public MySQLAdsDao() throws SQLException {
        Config config = new Config();
        DriverManager.registerDriver(new Driver());
        connection = DriverManager.getConnection(
                config.getUrl(),
                config.getUser(),
                config.getPassword()
        );
    }

    // Your methods should retrieve ads from the database and insert new ads into the database
    @Override
    public List<Ad> all() {
        // Create a query to select all the ads from the db
        String select = "SELECT * FROM ads";
        // Create a list of ads
        List<Ad> ads = new ArrayList<>();

        // Can't use throws in method signature, as that conflicts with the Ads Interface. Need to handle the SQLException with try/catch.
        try {
            // Represents an individual SQL statement
            Statement statement = connection.createStatement();
            // Execute a query and store the results
            ResultSet resultSet = statement.executeQuery(select);
            // Loop through the ads in the db
            while (resultSet.next()) {
                // Create an Ad out of each entry (ResultSet) in the db. getLong, etc. are methods from ResultSet object. Retrieves the value of the designated column in the current row of this ResultSet object. Column names must match adlister_db ads table columns.
                Ad newAd = new Ad(
                        resultSet.getLong("id"),
                        resultSet.getString("title"),
                        resultSet.getString("description")
                );
                // Add each ad to the List
                ads.add(newAd);
            } // while
        } catch (SQLException e) {
            e.printStackTrace();
        } // try/catch

        // Return the List of ads
        return ads;
    } // all()

    @Override
    public Long insert(Ad ad) {
        // SQL Statement
        // Syntax: INSERT INTO table_name (field1, field2, ...)
        // VALUES ('value1', 'value2', ...);
        String insert = String.format("INSERT INTO ads(user_id, title, description) VALUES(%s, %s, %s);", ad.getUserId(), ad.getTitle(), ad.getDescription());
        // test log
        System.out.println("insert statement: " + insert);
        try {
            // Represents an individual SQL statement
            Statement statement = connection.createStatement();
            // Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. Returns # rows affected.
            // RETURN... This tells the statement object that we wish to have access to the ids that are autogenerated by the database when inserting a record.
            statement.executeUpdate(insert, Statement.RETURN_GENERATED_KEYS);
            // Give us a result set object that holds any ids that were generated by the database.
            ResultSet resultSet = statement.getGeneratedKeys();
            // Loops through the results row by row
            resultSet.next();
            // Use getLong to retrieve the generated id, and pass 1 to indicate that we want the first result in the result set.
            return resultSet.getLong(1);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        // Interface specifies a return, so I just return null
        return null;
    } // insert()
} // class
